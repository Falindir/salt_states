/* Global Configuration */
globals {
	daemonize = yes
	setuid = yes
	user = nobody
	debug_level = 0
	max_udp_msg_len = 1472
	mute = no
	deaf = yes
	host_dmax = 0 /* secs */
	cleanup_threshold = 300 /* secs */
	gexec = no
	send_metadata_interval = 180 /* secs */
}

/* Cluster Specific attributes */
cluster {
	name = "cluster2"
	owner = "association1"
	latlong = "N43.631 W3.867"
	url = "http://example.com"
}

/* Host configuration */
host {
	location="unspecified"
}

/* UDP Channels for Send and Recv */
udp_recv_channel {
	mcast_join = 224.0.0.3
	port = 8649
    /* START managed zone */
    /* rcv interface */
    /* mcast_if = em1 */
    /* END managed zone */
}
udp_send_channel {
	mcast_join = 224.0.0.3
	host = 10.1.1.1
	port = 8649
    /* START managed zone */
    /* sending interface */
    /* mcast_if = em1 */
    /* END managed zone */
}

/* TCP Accept Channel */
tcp_accept_channel {
	port = 8649

	acl {
		default = "deny"

		access {
			ip = 127.0.0.1
			mask = 32
			action = "allow"
		}

		access {
			ip = 10.1.0.0
			mask = 16
			action = "allow"
		}
	}
}

/* Modules */
modules {
	module {
		name = "core_metrics"
	}

	module {
		name = "cpu_module"
		path = "/usr/lib/ganglia/modcpu.so"
	}

	module {
		name = "disk_module"
		path = "/usr/lib/ganglia/moddisk.so"
	}

	module {
		name = "load_module"
		path = "/usr/lib/ganglia/modload.so"
	}

	module {
		name = "mem_module"
		path = "/usr/lib/ganglia/modmem.so"
	}

	module {
		name = "net_module"
		path = "/usr/lib/ganglia/modnet.so"
	}

	module {
		name = "proc_module"
		path = "/usr/lib/ganglia/modproc.so"
	}

	module {
		name = "sys_module"
		path = "/usr/lib/ganglia/modsys.so"
	}

	module {
		name = "python_module"
		path = "/usr/lib/ganglia/modpython.so"
        params = "/usr/lib/ganglia/python_modules"
	}
}

/* Metrics Collection group */
collection_group {
	collect_every = 60
	time_threshold = 300
	metric {
		name = "location"
		value_threshold = 10.0
	}
	metric {
		name = "load_one"
		value_threshold = 10.0
	}
	metric {
		name = "mem_total"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_intr"
		value_threshold = 10.0
	}
	metric {
		name = "proc_run"
		value_threshold = 10.0
	}
	metric {
		name = "load_five"
		value_threshold = 10.0
	}
	metric {
		name = "disk_free"
		value_threshold = 10.0
	}
	metric {
		name = "mem_cached"
		value_threshold = 10.0
	}
	metric {
		name = "mtu"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_sintr"
		value_threshold = 10.0
	}
	metric {
		name = "pkts_in"
		value_threshold = 10.0
	}
	metric {
		name = "bytes_in"
		value_threshold = 10.0
	}
	metric {
		name = "bytes_out"
		value_threshold = 10.0
	}
	metric {
		name = "swap_total"
		value_threshold = 10.0
	}
	metric {
		name = "mem_free"
		value_threshold = 10.0
	}
	metric {
		name = "load_fifteen"
		value_threshold = 10.0
	}
	metric {
		name = "boottime"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_idle"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_aidle"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_user"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_nice"
		value_threshold = 10.0
	}
	metric {
		name = "sys_clock"
		value_threshold = 10.0
	}
	metric {
		name = "mem_buffers"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_system"
		value_threshold = 10.0
	}
	metric {
		name = "part_max_used"
		value_threshold = 10.0
	}
	metric {
		name = "disk_total"
		value_threshold = 10.0
	}
	metric {
		name = "heartbeat"
		value_threshold = 10.0
	}
	metric {
		name = "mem_shared"
		value_threshold = 10.0
	}
	metric {
		name = "machine_type"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_wio"
		value_threshold = 10.0
	}
	metric {
		name = "proc_total"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_num"
		value_threshold = 10.0
	}
	metric {
		name = "cpu_speed"
		value_threshold = 10.0
	}
	metric {
		name = "pkts_out"
		value_threshold = 10.0
	}
	metric {
		name = "swap_free"
		value_threshold = 10.0
	}
	metric{
		name = 'os_name'
	}
	metric{
		name = 'os_release'
	}
}

/* include ('/opt/ganglia/etc/conf.d/*.pyconf') */
include ('/etc/ganglia/conf.d/*.pyconf')

